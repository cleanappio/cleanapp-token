/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace KitnDisbursement {
  export type CoinsSpendResultStruct = {
    receiver: AddressLike;
    amount: BigNumberish;
    result: boolean;
  };

  export type CoinsSpendResultStructOutput = [
    receiver: string,
    amount: bigint,
    result: boolean
  ] & { receiver: string; amount: bigint; result: boolean };
}

export interface KitnDisbursementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getKitnBalance"
      | "getWalletBalance"
      | "kitnToken"
      | "owner"
      | "spendCoins"
      | "transferKitnToMe"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CoinsSpent"): EventFragment;

  encodeFunctionData(
    functionFragment: "getKitnBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kitnToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "spendCoins",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferKitnToMe",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getKitnBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kitnToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spendCoins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferKitnToMe",
    data: BytesLike
  ): Result;
}

export namespace CoinsSpentEvent {
  export type InputTuple = [results: KitnDisbursement.CoinsSpendResultStruct[]];
  export type OutputTuple = [
    results: KitnDisbursement.CoinsSpendResultStructOutput[]
  ];
  export interface OutputObject {
    results: KitnDisbursement.CoinsSpendResultStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KitnDisbursement extends BaseContract {
  connect(runner?: ContractRunner | null): KitnDisbursement;
  waitForDeployment(): Promise<this>;

  interface: KitnDisbursementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getKitnBalance: TypedContractMethod<[], [bigint], "view">;

  getWalletBalance: TypedContractMethod<[], [bigint], "view">;

  kitnToken: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  spendCoins: TypedContractMethod<
    [_receivers: AddressLike[], _amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  transferKitnToMe: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getKitnBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWalletBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "kitnToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "spendCoins"
  ): TypedContractMethod<
    [_receivers: AddressLike[], _amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferKitnToMe"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CoinsSpent"
  ): TypedContractEvent<
    CoinsSpentEvent.InputTuple,
    CoinsSpentEvent.OutputTuple,
    CoinsSpentEvent.OutputObject
  >;

  filters: {
    "CoinsSpent(tuple[])": TypedContractEvent<
      CoinsSpentEvent.InputTuple,
      CoinsSpentEvent.OutputTuple,
      CoinsSpentEvent.OutputObject
    >;
    CoinsSpent: TypedContractEvent<
      CoinsSpentEvent.InputTuple,
      CoinsSpentEvent.OutputTuple,
      CoinsSpentEvent.OutputObject
    >;
  };
}
